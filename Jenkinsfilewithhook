properties([
  pipelineTriggers([
   [$class: 'GenericTrigger',
    genericVariables: [
             [ key: 'committer_name', value: '$.pusher.name' ],
             [ key: 'committer_email', value: '$.commits.committer.email' ],
             [ key: 'commit', value: '$.commits.message' ],
             [ key: 'clone_url', value: '$.repository.url' ],
             [ key: 'action', value: '$.action' ],
             [ key: 'sha', value: '$.pull_request.head.sha' ],
             [ key: 'refhead', value: '$.pull_request.head.ref' ],
             [ key: 'refbase', value: '$.pull_request.base.ref' ],
             [ key: 'merged', value: '$.pull_request.merged' ],
             [ key: 'ACCOUNT', value: '$.pull_request.user.login' ],
             [ key: 'REPO', value: '$.pull_request.head.repo.name' ],

    ],
     
 
    
    token: 'abc123',
                causeString: '##### Triggered on ${refhead} commit ${sha} #####',

      regexpFilterText: '$action $merged',
      regexpFilterExpression: '^opened false$|^reopened false$|^synchronize false$|^closed true$',
      printContributedVariables: true,
      printPostContent: true,
    
   ]
  ])
 ])
pipeline {
    agent any 

    stages {
      stage('clone rep')
      {
        steps {
          script {
             if ( merged != "true" ) {
              checkout([$class: 'GitSCM',
              branches: [[name: '$refhead']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                [$class: 'PreBuildMerge',
                  options: [
                  mergeRemote: 'origin',
                  mergeStrategy: 'RECURSIVE',
                  mergeTarget: "$refbase"
                           ]
                         ],

                    ], 
                     userRemoteConfigs: [[url: 'https://github.com/${ACCOUNT}/${REPO}.git', credentialsId: 'GITACC']]
                        ])
                    
                    } // if merged != "true"
                     if ( merged == "true" ) {
                        checkout([$class: 'GitSCM',
                            branches: [[name: '$refbase']],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [
                                [$class: 'SubmoduleOption',
                                    disableSubmodules: false,
                                    parentCredentials: true,
                                    recursiveSubmodules: true,
                                    reference: '',
                                    trackingSubmodules: false
                                ],
                            ],
                       userRemoteConfigs: [[
                         credentialsId: "${GITACC}",
                            url: "https://github.com/${ACCOUNT}/${REPO}.git"]]

     
                        ])
                        echo "merged is true"
                    } // if merged == "true"
          }
        }
      }

      stage('build') {
          steps {
              gitPost ("Build", "STARTED #$BUILD_NUMBER", "PENDING")
              script{
                 sh  '''
                 docker build -t nginxtest -f Dockerfile .
                 '''

                 }
              }
              
         post {
                success {
                    gitPost ("Build", "SUCCESS #$BUILD_NUMBER", "SUCCESS")
                }
                failure {
                    gitPost ("Build", "FAILED #$BUILD_NUMBER", "FAILURE")
                }
            } 
      }

      stage ('test'){
          steps{
             gitPost ("test", "STARTED #$BUILD_NUMBER", "PENDING") 
              script{
                sh '''
                 docker-compose -d up
                  curl -I localhost | head -n 1 | cut -d$' ' -f2 
                  '''
           
              }
          }
      
      post {
                success {
                    gitPost ("test", "SUCCESS #$BUILD_NUMBER", "SUCCESS")
                }
                failure {
                    gitPost ("test", "FAILED #$BUILD_NUMBER", "FAILURE")
                }
            } // post
      }

    }
}
def gitPost (CONTEXT, DESCRIPTION, STATUS) {
    script { 

 githubNotify context: "Jenkins/${CONTEXT}", description: "${DESCRIPTION}", status: "${STATUS}", credentialsId: "${token}", account: "${ACCOUNT}", repo: "${REPO}", sha: "${sha}", targetUrl: "${BUILD_URL}"
        
    }
}



